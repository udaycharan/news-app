{"version":3,"sources":["components/header.jsx","components/newsItem.jsx","components/content.jsx","App.js","index.js"],"names":["Header","className","id","Newsitem","title","description","url","urlToImage","publishedAt","substring","src","alt","href","Content","useState","items","setItems","hasMore","setHasMore","page","setPage","date","setDate","useEffect","a","Axios","get","res","data","articles","console","log","getArticles","localStorageData","JSON","parse","localStorage","getItem","setItem","stringify","fetchNews","finalData","fetchData","dataFromServer","length","type","value","onChange","event","dateInput","initialDate","toISOString","subString","formattedDate","target","dataLength","next","loader","endMessage","style","textAlign","map","index","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mLAceA,MAVf,WAGI,OACI,wBAAQC,UAAU,SAAlB,SACA,sCAAQ,sBAAMC,GAAG,OAAT,wB,sCCYDC,MAjBf,YAAyE,IAArDC,EAAoD,EAApDA,MAAOC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,YAGrD,OAEI,sBAAKP,UAAU,kBAAf,UACI,gDAAmBO,EAAYC,UAAU,EAAG,OAC5C,qBAAKC,IAAKH,EAAYI,IAAI,SAC1B,sBAAKV,UAAU,cAAf,UACI,6BAAKG,IACL,6BAAI,mBAAGQ,KAAMN,EAAT,SAAeF,MACnB,4BAAIC,W,wBCsHLQ,MAxHf,WAEI,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAwBJ,mBAAS,GAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAAwBN,mBAAS,IAAjC,mBAAOO,EAAP,KAAaC,EAAb,KAYAC,qBAAU,YAEW,uCAAG,4BAAAC,EAAA,sEACEC,IAAMC,IAAN,+DAAkEL,EAAlE,+DADF,OACVM,EADU,OAGhBX,EAASW,EAAIC,KAAKC,UAClBC,QAAQC,IAAI,gBAJI,2CAAH,qDAQjBC,KAED,CAACX,IAKJE,qBAAU,WAEN,IAAMU,EAAmBC,KAAKC,MAAMC,aAAaC,QAAQ,iBAErDJ,GACAjB,EAASiB,KAKd,IAGHV,qBAAU,WAGNa,aAAaE,QAAQ,eAAgBJ,KAAKK,UAAUxB,OAKxD,IAAMyB,EAAS,uCAAG,8BAAAhB,EAAA,sEAEIC,IAAMC,IAAN,+DAAkEL,EAAlE,iBAA+EF,EAA/E,wDAFJ,cAERQ,EAFQ,OAIRc,EAAYd,EAAIC,KAAKC,SAJb,kBAMPY,GANO,2CAAH,qDAYTC,EAAS,uCAAG,4BAAAlB,EAAA,sEAEegB,IAFf,OAERG,EAFQ,OAGd3B,EAAS,GAAD,mBAAKD,GAAL,YAAe4B,MAIO,IAA1BA,EAAeC,QAAgBD,EAAeC,OAAS,IACvD1B,GAAW,GAGfE,EAAQD,EAAO,GAXD,2CAAH,qDAkBf,OACI,uBAAMlB,UAAU,YAAhB,UAEI,uBAAO4C,KAAK,OAAOC,MAAOzB,EAAM0B,SAAU,SAACC,GAAD,OAhF5B,SAACC,GACnB,IAAMC,EAAcD,EAAUE,cAAcC,UAAU,EAAG,IAGzD9B,EAAQ4B,GA4EiDG,CAAcL,EAAMM,OAAOR,UAEhF,cAAC,IAAD,CAEIS,WAAYxC,EAAM6B,OAClBY,KAAMd,EACNzB,QAASA,EACTwC,OAAQ,4CACRC,WACI,mBAAGC,MAAO,CAAEC,UAAW,UAAvB,SACI,qDARZ,SAkBK7C,EAAM8C,KAAI,WAAuDC,GAAW,IAA/D1D,EAA8D,EAA9DA,MAAOC,EAAuD,EAAvDA,YAAaC,EAA0C,EAA1CA,IAAKC,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,YAE/C,OAAO,cAAC,EAAD,CAAsBJ,MAAOA,EAAOC,YAAaA,EAAaC,IAAKA,EAAKC,WAAYA,EAAYC,YAAaA,GAA9FsD,Y,MC1G3BC,MAVf,WACE,OAEE,sBAAK9D,UAAU,MAAf,UACC,cAAC,EAAD,IACA,cAAC,EAAD,QCPL+D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bad3e486.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\n\r\nfunction Header(){\r\n  \r\n\r\n    return(\r\n        <header className=\"header\">\r\n        <h2>News<span id=\"tag2\"> App</span></h2>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n// import  { useEffect, useState } from \"react\";\r\n\r\n\r\nfunction Newsitem({ title, description, url, urlToImage, publishedAt }) {\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"news-item-style\">\r\n            <small>published: {publishedAt.substring(0, 10)}</small>\r\n            <img src={urlToImage} alt=\"news\" />\r\n            <div className=\"description\">\r\n                <h2>{title}</h2>\r\n                <h5><a href={url}>{title}</a></h5>\r\n                <p>{description}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Newsitem;","import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Newsitem from \"./newsItem.jsx\";\r\nimport Axios from \"axios\";\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\n\r\n\r\n// to convert the daypickerinput value to string and below is the standard format.\r\n\r\nconst FORMAT = \"yyyy-MM-dd\";\r\n\r\n\r\nfunction Content() {\r\n\r\n    const [items, setItems] = useState([]);\r\n    const [hasMore, setHasMore] = useState(true);\r\n    const [page, setPage] = useState(2);\r\n    const [date, setDate] = useState(\"\");\r\n\r\n\r\n    const formattedDate = (dateInput) => {\r\n        const initialDate = dateInput.toISOString().subString(0, 10);\r\n        // console.log(initialDate);\r\n\r\n        setDate(initialDate);\r\n    }\r\n\r\n\r\n    //acts as componentDidMount which is responsible for first render.\r\n    useEffect(() => {\r\n\r\n        const getArticles = async () => {\r\n            const res = await Axios.get(`https://newsapi.org/v2/top-headlines?country=us&from=${date}&page=1&pageSize=5&apiKey=31ff968bcf534234a556cb5022e0888a`)\r\n\r\n            setItems(res.data.articles);\r\n            console.log(\"re-rendering\");\r\n            // setPage(1); \r\n        }\r\n\r\n        getArticles();\r\n\r\n    }, [date]);\r\n\r\n    //this will get the data stored in localstorage and render on the page if the device is offline.\r\n    //(means it loads when the actual component is not rendered)\r\n    //this will act as componentWillmount in class based component.\r\n    useEffect(() => {\r\n\r\n        const localStorageData = JSON.parse(localStorage.getItem(\"fetched-data\"));\r\n\r\n        if (localStorageData) {\r\n            setItems(localStorageData);\r\n        }\r\n\r\n\r\n\r\n    }, []);\r\n\r\n    //after first render this hooks update the data into localstorage\r\n    useEffect(() => {\r\n\r\n\r\n        localStorage.setItem(\"fetched-data\", JSON.stringify(items));\r\n\r\n    });\r\n\r\n\r\n    const fetchNews = async () => {\r\n\r\n        const res = await Axios.get(`https://newsapi.org/v2/top-headlines?country=us&from=${date}&page=${page}&pageSize=5&apiKey=31ff968bcf534234a556cb5022e0888a`);\r\n\r\n        const finalData = res.data.articles;\r\n\r\n        return finalData;\r\n    }\r\n\r\n\r\n    // this is the function/method which is responsible to render the next data if there is any(from source)\r\n    // with the help of infinite scroll component and with its props we can achieve the infinite scroll.\r\n    const fetchData = async () => {\r\n\r\n        const dataFromServer = await fetchNews();\r\n        setItems([...items, ...dataFromServer]);\r\n\r\n\r\n        //this sets the hasMore props to false only if there is no data tofetch\r\n        if (dataFromServer.length === 0 || dataFromServer.length < 5) {\r\n            setHasMore(false);\r\n        }\r\n\r\n        setPage(page + 1);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <main className=\"container\">\r\n\r\n            <input type=\"date\" value={date} onChange={(event) => formattedDate(event.target.value)} />\r\n\r\n            <InfiniteScroll\r\n\r\n                dataLength={items.length}\r\n                next={fetchData}\r\n                hasMore={hasMore}\r\n                loader={<h4>Loading...</h4>}\r\n                endMessage={\r\n                    <p style={{ textAlign: 'center' }}>\r\n                        <b>End of articles...</b>\r\n                    </p>\r\n                }\r\n\r\n            >\r\n\r\n\r\n                {/* this maps through our items array and renders the Newsitem component*/}\r\n\r\n\r\n                {items.map(({ title, description, url, urlToImage, publishedAt }, index) => {\r\n\r\n                    return <Newsitem key={index} title={title} description={description} url={url} urlToImage={urlToImage} publishedAt={publishedAt} />\r\n\r\n                })}\r\n            </InfiniteScroll>\r\n        </main>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Content;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n   // used fetch  but, i learnt that Axios has wide browser support and also some additional features like canelling requests so, used Axios \r\n    //             const getArticle = ()=>{\r\n\r\n    // const res = fetch(\"https://newsapi.org/v2/top-headlines?country=us&apiKey=7168bdfdbf2f4258a5baef8ad8c5fb09\")\r\n\r\n    //        res.then((data)=> data.json())\r\n    //        .then(result => console.log(result));\r\n\r\n    //             }\r\n\r\n    //             getArticle();","import React from \"react\";\nimport Header from \"./components/header.jsx\";\nimport Content from \"./components/content.jsx\";\nimport \"./App.css\";\n\n\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n     <Header/>\n     <Content/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}